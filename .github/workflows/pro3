#!/usr/bin/env python3

import re
import string 
import random
import math

# 1.
"""
infile = open("medline.dat", "r")
outfile = open("abstracts.dat", "wb")

for line in infile:
	ID = line
	url = "http://togows.dbcls.jp/entry/ncbi-pubmed/" + ID + "/"
	r = requests.get(url, allow_redirects=True)
	outfile.write(r.content)

outfile.close()


# 2



infile = open("abstracts1.dat", "r")
flag = False
Abstracts = list()
Abs = ""
        

for line in infile:

    End = re.search(r"^[A-Z]+\s+", line)
    if End is not None and Abs != "":
        flag = False
        Abstracts.append(Abs)        
        Abs = ""

    if flag: 
        line = re.sub("\n", " ", line)
        Abs += line 
    
    Reresult = re.search(r"^AB\s+-\s(.+)", line)
    if Reresult is not None:
        flag = True
        Abs += Reresult.group(1).strip()

infile.close()

outfile = open("cleanAbs.dat", "w")
for ABS in Abstracts:
    outfile.write(ABS + "\n")
outfile.close()


print(len(Abstracts))
n = int(len(Abstracts)/10)
tenperc_abs = random.sample(Abstracts, n)


print(len(tenperc_abs))
wcount = dict()
for Abstract in tenperc_abs:
    words = [word.strip(string.punctuation).lower() for word in Abstract.split()]
    for i in words:
        Reresult = re.search(r"([a-z]+(s)?)", i)
        if Reresult is not None and len(Reresult.group(1)) > 2:
            i = Reresult.group(1)
            if i not in wcount:
                wcount[i] = 0
            if i in wcount:
                wcount[i] += 1

print(sum(wcount.values()))
for w in sorted(wcount, key=wcount.get, reverse=True):
    print(w, wcount[w])




outfile = open("blacklist.dat", "w")

for w in wcount:
    n = (wcount[w] / sum(wcount.values())) * 100 
    if n > 0.009: # Modify this limit when we get the actual range with all the abstracts
        outfile.write(w + "\n")
    else:
        pass

outfile.close()


"""
# 3.

infile = open("blacklist.dat", "r")
infile2 = open("shortcleanAbs.dat", "r")
outfile = open("pairs", "w")

blacklist = list()
for line in infile:
    blacklist.append(line[:-1])

total_words = list()
relevant_words = dict()
for line in infile2:
    words = [word.strip(string.punctuation).lower() for word in line.split()]
    abstract = list()
    word_abs = list()
    for w in words:
        Reresult = re.search(r"([a-z]+(s)?)", w)
        if Reresult is not None:
            word_abs.append(w)

        if Reresult is not None and len(Reresult.group(1)) > 2:   
            if w not in blacklist:
                abstract.append(w)
            else:
                pass
    relevant_words[line] = abstract
    total_words.append(word_abs)

# Paring words and counting them
unique_words = dict()
for row in relevant_words:
    w_count = dict()
    for item in relevant_words[row]:

        if item not in w_count:
            w_count[item] = 1
        else:
            w_count[item] += 1

    unique_words[row] = w_count

"""
pairing = dict()
val = list()
for abst in unique_words:
    words = dict()
    if unique_words[abst].values() != "": val.append([num for num in unique_words[abst].values()])
    for w in unique_words[abst]:  
        cooc = dict()
        for row in val:
            for i in range(len(row)):
                for j in range(i, len(row)):
                    if row[i] <= row[j]:
                        row[j] = row[i]
                
                    cooc[w]= row[j]
            
        words[w] = cooc

    pairing[abst] = words
"""   
def compare_values(p1, p2):
    if (p1 < p2):
        return p1
    else:
        return p2
globa = dict()
for abst in unique_words:
    dic = dict()
    for jk, jv in w_count.items():
        ne = dict()
        for ik, iv in w_count.items():
            ne[ik] = compare_values(jv, iv)
        dic[jk] = ne
    globa[abst] = dic

#print(globa)





for row in range(len(total_words)):
        for column in range(len(total_words[0])):
            for ele in range(len(total_words)):
                s = 1
print(total_words[row][ele])
print(column)         
print(ele)
"""
def llh (p1):
    for row in range(len(total_words)):
        for column in range(len(total_words[0])):
            for ele in range(len(total_words)):
                re = math.log(p1/total_words[row]) 
        return re

"""

LLH_glob = dict()
for abst in globa:
    LLH_w = dict()
    for pk, pv in dic.items():
        LLH = dict()
        for jk, jv in ne.items():
            for ik, iv in ne.items():
                
               LLH[ik] = (iv)
        LLH_w[pk] = LLH
    LLH_glob[abst] = LLH_w

#print(LLH_w)
    
